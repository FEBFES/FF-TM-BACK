version: '3.9'

name: ff-tm-back
services:
  postgres:
    image: postgres:13.3
    container_name: postgres-ff-tm
    restart: always
    env_file:
      .env
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    restart: always

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    ports:
      - "29092:29092"
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8040:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=PLAINTEXT://kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    links:
      - kafka
      - zookeeper

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    restart: always
    networks:
      - zipkin

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"

  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis:6379
    depends_on:
      - redis

  hazelcast-mc:
    image: hazelcast/management-center:latest
    container_name: hazelcast-mc
    ports:
      - "8180:8080"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    depends_on:
      - redis-exporter

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

  config-server:
    build:
      context: ../
      dockerfile: docker/Dockerfile-config-server
    ports:
      - "8888:8888"
    env_file:
      .env
    restart: on-failure
    depends_on:
      - postgres

  admin-server:
    build:
      context: ../
      dockerfile: docker/Dockerfile-admin-server
    ports:
      - "8095:8095"
    env_file:
      .env
    restart: on-failure
    depends_on:
      - config-server

  authentication:
    build:
      context: ../
      dockerfile: docker/Dockerfile-authentication
    ports:
      - "8092:8092"
    env_file:
      .env
    restart: on-failure
    depends_on:
      - postgres
      - config-server
      - redis

  gateway:
    build:
      context: ../
      dockerfile: docker/Dockerfile-gateway
    ports:
      - "8061:8061"
    env_file:
      .env
    restart: on-failure
    depends_on:
      - postgres
      - config-server

  notification:
    build:
      context: ../
      dockerfile: docker/Dockerfile-notification
    ports:
      - "8091:8091"
    env_file:
      .env
    restart: on-failure
    depends_on:
      - postgres
      - config-server

  ff-tm-back-monolith:
    build:
      context: ../
      dockerfile: docker/Dockerfile
    ports:
      - "8090:8090"
    env_file:
      .env
    restart: on-failure
    volumes:
      - febfes-files:/home/app/files
      - febfes-userPics:/home/app/files/userPics
    depends_on:
      - postgres
      - config-server

networks:
  zipkin:
    driver: bridge

volumes:
  febfes-files:
  febfes-userPics:
  db-data:
  grafana-data:
